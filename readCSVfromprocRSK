#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jun 17 15:31:57 2025

@author: epoirier
"""


import pandas as pd
from datetime import datetime

# Step 1: Read all lines
file_path = '/home/epoirier/Documents/PROJETS/2025/Proc_RBR_Somlit/20240606/downcast/231853_20240607_1104 somlit 21_profile0.csv'
with open(file_path, "r") as f:
    lines = f.readlines()

# Step 2: Find the last line starting with '//'
header_line_idx = None
for idx, line in enumerate(lines):
    if line.startswith("//"):
        header_line_idx = idx

# Step 3: Read the file into DataFrame, skipping earlier lines
# Beware of sep ',   ' 4 spaces after comma
df = pd.read_csv(
    file_path,
    sep =',    ',
    skiprows=header_line_idx + 1,     # Skip all lines before actual data
    header=None ,                      # No header in data part
    
)

# Step 4: Set the header from the last '//' line
column_names = lines[header_line_idx].lstrip("//").strip().split(",    ")
df.columns = column_names

# remove line with nan
df=df.dropna()

print(df.head())
'''
# lecteur qui prend en compte les décimales sur le format d'heure
df1 = pd.read_csv(input_file,
                  skiprows=19
                  parse_dates=['date'],
                  sep=';',
                  date_parser=lambda x: pd.to_datetime(x, format='%Y-%m-%d %H:%M:%S,%f')
                  )
'''

'''
parse_dates=['timestamp(yyyy-mm-ddTHH:MM:ss.FFF'],
date_parser=lambda x: pd.to_datetime(x, format='%Y-%m-%d %H:%M:%S,%f')


parse_dates=['timestamp(yyyy-mm-ddTHH:MM:ss.FFF'],
date_parser=lambda x: pd.to_datetime(x, format='%Y-%m-%d %H:%M:%S,%f')
'''
# Convert the first column to datetime using your format
df.iloc[:, 0] = pd.to_datetime(df.iloc[:, 0], format='%Y-%m-%dT%H:%M:%S.%f')

# Set the first column as the index
df.set_index(df.columns[0], inplace=True)

# Rename dataframes column for Somlit format



# Assume df already has datetime index

# 1. Extract date and time from index

# For date only (no time)
df['DATE'] = df.index.strftime('%Y-%m-%d')

# For time only, without decimals in seconds
df['HEURE'] = df.index.strftime('%H:%M:%S')


# 2. Add first column filled with 5
df.insert(0, 'ID_SITE', 5)

#Renames columns 
df.rename(columns={
    'temperature(°C)': 'TEMPERATURE',
    'chlorophyll-a(ug/l)': 'FLUORESCENCE',
    'par(µMol/m²/s)': 'PAR',
    'salinity(PSU)':'SALINITE',
    'depth(m)':'PROFONDEUR'
}, inplace=True)



# 3. Reorder columns so the first 3 columns are ID_SITE, DATE, HEURE
# followed by the rest of the original columns (excluding old index)
cols = ['ID_SITE', 'DATE', 'HEURE', 'TEMPERATURE' ,'FLUORESCENCE' ,'PAR', 'SALINITE', 'PROFONDEUR']
df = df[cols]


# Round to specific decimal numbers per channel for Somlit output file

df['TEMPERATURE'] = df['TEMPERATURE'].round(4)
df['FLUORESCENCE']=df['FLUORESCENCE'].round(0)
df['PAR'] = df['PAR'].round(3)
df['SALINITE'] = df['SALINITE'].round(4)
df['PROFONDEUR']=df['PROFONDEUR'].round(2)



# 4. Prepare your multi-line header as a string
header_lines = [
    "// SOMLIT somlit.fr;;;;;;;",
    "// RBR processing IUEM;"+datetime.now().strftime('%Y-%m-%d;%H:%M:%S')+";;;;;",# current time of processing
    "ID_SITE;DATE;HEURE;TEMPERATURE;FLUORESCENCE;PAR;SALINITE;PROFONDEUR",
    "//;(yyyy-mm-dd);(hh:mm:ss);°C;µg/l;µMol/m²/s;PSU;m",
    ";;;;;;;",
]

# 5. Write the file with the custom header

with open('output.csv', 'w') as f:
    # Write custom header lines
    for line in header_lines:
        f.write(line + '\n')
    # Write DataFrame to file with ; separator, no header (already written)
    df.to_csv(f, sep=';', index=False, header=False)
